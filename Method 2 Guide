# Easiest Way to Install Jupyter Notebook with TensorFlow

## Follow These Instructions Step by Step

1. Download or save the YAML file as `tensorflow_cpu_environment.yml`. [here](https://docs.conda.io/en/latest/miniconda.html)
2. Run the following command in the Command Prompt:
   ```bash
   conda env create -f tensorflow_cpu_environment.yml
   ```
3. Activate the environment with:
   ```bash
   conda activate tensorflow_env
   ```

# Step-by-Step Instructions to Install Jupyter Kernel

A new Jupyter kernel points to a specific Python environment. Since you're working with Python 3.10 and want to create a kernel for your `tensorflow_env` environment, you should adjust the command accordingly. Hereâ€™s how to do it:

### 1) Activate Your Environment
First, make sure you activate your `tensorflow_env` environment:
```bash
conda activate tensorflow_env
```

### 2) Install ipykernel
If you haven't already installed `ipykernel`, you can do so by running:
```bash
pip install ipykernel
```

### 3) Add the Kernel to Jupyter
Run the following command to add the kernel to Jupyter, adjusting the name and display name as needed:
```bash
python -m ipykernel install --user --name tensorflow_env --display-name "Python 3.10 (tensorflow_env)"
```
This command creates a new kernel associated with your `tensorflow_env` environment.

### 4) Launch Jupyter Notebook
After adding the kernel, launch Jupyter Notebook:
```bash
jupyter notebook
```

### 5) Select the New Kernel
When you create a new notebook, you should see "Python 3.10 (tensorflow_env)" as an option. Select this kernel for your notebook to use the TensorFlow environment.

### 6) Verify Installation
In the notebook, you can run the following code to check TensorFlow:
```python
import tensorflow as tf
print(tf.__version__)
```
